#!/usr/bin/env python3

import yaml
import sys
import time
import signal
import shlex
import os
import threading
import logging
import argparse
from pathlib import Path
from dataclasses import dataclass, field
from typing import Dict, List, Optional
import importlib.util
import subprocess


class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'

def colored_print(text, color, prefix=""):
    print(f"{color}{prefix}{text}{Colors.RESET}")

def print_header(title):
    print("\n" + "="*60)
    colored_print(f" {title} ", Colors.BOLD + Colors.CYAN)
    print("="*60)

@dataclass
class ServiceConfig:
    name: str
    command: List[str] = field(default_factory=list)
    working_dir: Optional[str] = None
    env: Dict[str, str] = field(default_factory=dict)
    depends_on: List[str] = field(default_factory=list)
    startup_delay: int = 0
    color: str = "white"
    enabled: bool = True
    python_function: Optional[str] = None
    module_path: Optional[str] = None
    post_start_hook: Optional[str] = None

@dataclass
class ComposerConfig:
    services: Dict[str, ServiceConfig] = field(default_factory=dict)
    global_env: Dict[str, str] = field(default_factory=dict)
    startup_order: List[str] = field(default_factory=list)
    hooks: Dict[str, List[str]] = field(default_factory=dict)

class ServiceComposer:
    def __init__(self, config_path: Optional[str] = None):
        self.config_path = config_path
        self.config: Optional[ComposerConfig] = None
        self.threads: List[threading.Thread] = []
        self.running = True
        self.services_status: Dict[str, str] = {}  # "starting", "running", "stopped", "error"
        self.service_outputs: Dict[str, List[str]] = {}
        self.color_map = {
            "red": Colors.RED,
            "green": Colors.GREEN,
            "yellow": Colors.YELLOW,
            "blue": Colors.BLUE,
            "magenta": Colors.MAGENTA,
            "cyan": Colors.CYAN,
            "white": Colors.RESET
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        colored_print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...", Colors.YELLOW)
        self.stop_all()
        sys.exit(0)

    def load_config(self, config_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)

            self.config = ComposerConfig()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.config.global_env = data.get('global_env', {})

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞
            self.config.startup_order = data.get('startup_order', [])

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ö—É–∫–æ–≤
            self.config.hooks = data.get('hooks', {})

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            services_data = data.get('services', {})
            for service_name, service_config in services_data.items():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
                command = service_config.get('command', [])
                if isinstance(command, str):
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è shell –∫–æ–º–∞–Ω–¥
                    command = shlex.split(command)

                service = ServiceConfig(
                    name=service_name,
                    command=command,
                    working_dir=service_config.get('working_dir'),
                    env=service_config.get('env', {}),
                    depends_on=service_config.get('depends_on', []),
                    startup_delay=service_config.get('startup_delay', 0),
                    color=service_config.get('color', 'white'),
                    enabled=service_config.get('enabled', True),
                    python_function=service_config.get('python_function'),
                    module_path=service_config.get('module_path'),
                    post_start_hook=service_config.get('post_start_hook')
                )
                self.config.services[service_name] = service
                self.services_status[service_name] = "stopped"
                self.service_outputs[service_name] = []

            colored_print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}", Colors.GREEN)
            return True

        except FileNotFoundError:
            colored_print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}", Colors.RED)
            return False
        except yaml.YAMLError as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}", Colors.RED)
            return False
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", Colors.RED)
            return False

    def create_example_config(self, output_path: str = "service-composer.yaml"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        example_config = {
            'global_env': {
                'PYTHONPATH': '.',
                'ENVIRONMENT': 'development'
            },
            'startup_order': ['backend', 'frontend', 'telegram_bot'],
            'hooks': {
                'pre_start': ['echo "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."'],
                'post_start': ['echo "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"']
            },
            'services': {
                'backend': {
                    'command': ['python', '-m', 'uvicorn', 'src.main:app', '--host', '0.0.0.0', '--port', '8000', '--reload'],
                    'working_dir': 'backend',
                    'color': 'green',
                    'startup_delay': 2,
                    'env': {
                        'PORT': '8000'
                    },
                    'enabled': True
                },
                'frontend': {
                    'command': ['python', 'server.py'],
                    'working_dir': 'frontend',
                    'color': 'blue',
                    'startup_delay': 1,
                    'depends_on': ['backend'],
                    'enabled': True
                },
                'telegram_bot': {
                    'command': ['python', 'main.py'],
                    'working_dir': 'tg_bot',
                    'color': 'magenta',
                    'startup_delay': 3,
                    'depends_on': ['backend'],
                    'enabled': True
                },
                'ngrok': {
                    'command': ['ngrok', 'start', '--config', 'ngrok.yml', '--all'],
                    'working_dir': '.',
                    'color': 'cyan',
                    'startup_delay': 0,
                    'enabled': False
                },
                'custom_function': {
                    'python_function': 'custom_startup_function',
                    'module_path': 'custom_module.py',
                    'color': 'yellow',
                    'startup_delay': 0,
                    'enabled': False
                }
            }
        }

        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                yaml.dump(example_config, f, default_flow_style=False, allow_unicode=True, indent=2)
            colored_print(f"‚úÖ –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {output_path}", Colors.GREEN)
            return True
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", Colors.RED)
            return False

    def run_hooks(self, hook_type: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤"""
        if not self.config or hook_type not in self.config.hooks:
            return

        hooks = self.config.hooks[hook_type]
        colored_print(f"ü™ù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {hook_type} —Ö—É–∫–æ–≤...", Colors.YELLOW)

        for hook in hooks:
            try:
                result = subprocess.run(hook, shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    colored_print(f"‚úÖ –•—É–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {hook}", Colors.GREEN)
                    if result.stdout:
                        print(result.stdout.strip())
                else:
                    colored_print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—É–∫–∞: {hook}", Colors.RED)
                    if result.stderr:
                        print(result.stderr.strip())
            except Exception as e:
                colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—É–∫–∞ {hook}: {e}", Colors.RED)

    def run_service_hook(self, hook_name: str, service_name: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.config or hook_name not in self.config.hooks:
            colored_print(f"‚ö†Ô∏è –•—É–∫ {hook_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}", Colors.YELLOW)
            return

        hooks = self.config.hooks[hook_name]
        colored_print(f"ü™ù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–∞ {hook_name} –¥–ª—è {service_name}...", Colors.YELLOW)

        for hook in hooks:
            try:
                result = subprocess.run(hook, shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    colored_print(f"‚úÖ –•—É–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {hook}", Colors.GREEN)
                    if result.stdout:
                        print(result.stdout.strip())
                else:
                    colored_print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—É–∫–∞: {hook}", Colors.RED)
                    if result.stderr:
                        print(result.stderr.strip())
            except Exception as e:
                colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—É–∫–∞ {hook}: {e}", Colors.RED)

    def call_python_function(self, service: ServiceConfig):
        """–í—ã–∑–æ–≤ Python —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã"""
        if not service.python_function or not service.module_path:
            colored_print(f"‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Python —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è {service.name}", Colors.RED)
            return

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
            spec = importlib.util.spec_from_file_location("custom_module", service.module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            function = getattr(module, service.python_function)

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            colored_print(f"üêç –í—ã–∑–æ–≤ Python —Ñ—É–Ω–∫—Ü–∏–∏: {service.python_function}",
                          self.color_map.get(service.color, Colors.RESET), f"[{service.name}] ")

            result = function()

            colored_print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {service.python_function} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                          self.color_map.get(service.color, Colors.RESET), f"[{service.name}] ")

            if result:
                colored_print(str(result),
                              self.color_map.get(service.color, Colors.RESET), f"[{service.name}] ")

        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {service.python_function}: {e}", Colors.RED)
            self.services_status[service.name] = "error"

    def run_service(self, service: ServiceConfig):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if not service.enabled:
            colored_print(f"‚è≠Ô∏è –°–µ—Ä–≤–∏—Å {service.name} –æ—Ç–∫–ª—é—á–µ–Ω", Colors.YELLOW)
            return

        self.services_status[service.name] = "starting"
        color = self.color_map.get(service.color, Colors.RESET)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if service.startup_delay > 0:
            colored_print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {service.startup_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º {service.name}...",
                          Colors.YELLOW)
            time.sleep(service.startup_delay)

        try:
            # –ï—Å–ª–∏ —ç—Ç–æ Python —Ñ—É–Ω–∫—Ü–∏—è
            if service.python_function:
                self.call_python_function(service)
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            if not service.command:
                colored_print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service.name}", Colors.RED)
                self.services_status[service.name] = "error"
                return

            colored_print(f"üöÄ –ó–∞–ø—É—Å–∫ {service.name}...", color, f"[{service.name}] ")
            colored_print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(service.command)}", Colors.BLUE, f"[{service.name}] ")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env.update(self.config.global_env)
            env.update(service.env)

            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            proc = subprocess.Popen(
                service.command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=service.working_dir,
                env=env,
                bufsize=1,
                universal_newlines=False
            )

            self.services_status[service.name] = "running"

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
            if service.post_start_hook:
                self.run_service_hook(service.post_start_hook, service.name)

            # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            while self.running and proc.poll() is None:
                try:
                    line = proc.stdout.readline()
                    if line:
                        line = line.decode('utf-8', errors='ignore').rstrip()
                        if line:  # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                            colored_print(line, color, f"[{service.name}] ")
                            self.service_outputs[service.name].append(line)
                except:
                    break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if proc.returncode != 0 and self.running:
                colored_print(f"‚ùå –°–µ—Ä–≤–∏—Å {service.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {proc.returncode})",
                              Colors.RED)
                self.services_status[service.name] = "error"
            else:
                self.services_status[service.name] = "stopped"

        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service.name}: {e}", Colors.RED)
            self.services_status[service.name] = "error"

    def check_dependencies(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.config or service_name not in self.config.services:
            return False

        service = self.config.services[service_name]
        for dep in service.depends_on:
            if dep not in self.services_status:
                colored_print(f"‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {service_name}", Colors.RED)
                return False
            if self.services_status[dep] != "running":
                colored_print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ {dep} –¥–ª—è {service_name}...",
                              Colors.YELLOW)
                return False

        return True

    def get_startup_order(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if not self.config:
            return []

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —è–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        if self.config.startup_order:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ startup_order
            explicit_order = [s for s in self.config.startup_order if s in self.config.services]
            remaining = [s for s in self.config.services.keys() if s not in explicit_order]
            return explicit_order + remaining

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        ordered = []
        remaining = list(self.config.services.keys())

        while remaining:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            ready = []
            for service_name in remaining:
                service = self.config.services[service_name]
                if all(dep in ordered for dep in service.depends_on):
                    ready.append(service_name)

            if not ready:
                # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏–ª–∏ –æ—à–∏–±–∫–∞
                colored_print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                              Colors.RED)
                ordered.extend(remaining)
                break

            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            for service_name in ready:
                ordered.append(service_name)
                remaining.remove(service_name)

        return ordered

    def run_all_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.config:
            colored_print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", Colors.RED)
            return False

        print_header("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.run_hooks('pre_start')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–ø—É—Å–∫–∞
        startup_order = self.get_startup_order()
        enabled_services = [s for s in startup_order if self.config.services[s].enabled]

        colored_print(f"üìã –ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø—É—Å–∫–∞: {' ‚Üí '.join(enabled_services)}", Colors.CYAN)

        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_name in startup_order:
            if not self.config.services[service_name].enabled:
                continue

            service = self.config.services[service_name]

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            max_wait = 30  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            wait_time = 0
            while not self.check_dependencies(service_name) and wait_time < max_wait:
                time.sleep(1)
                wait_time += 1

            if wait_time >= max_wait:
                colored_print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {service_name}",
                              Colors.RED)
                continue

            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(
                target=self.run_service,
                args=(service,),
                daemon=True
            )
            thread.start()
            self.threads.append(thread)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            time.sleep(0.5)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        self.run_hooks('post_start')

        colored_print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!", Colors.GREEN)
        colored_print("üìù –õ–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", Colors.YELLOW)
        print("="*60 + "\n")

        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
                running_count = sum(1 for status in self.services_status.values()
                                    if status in ["starting", "running"])
                if running_count == 0:
                    colored_print("‚ÑπÔ∏è –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å", Colors.YELLOW)
                    break
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()

        return True

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.running = False
        colored_print("üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã...", Colors.YELLOW)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        self.run_hooks('pre_stop')

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.join(timeout=1)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.run_hooks('post_stop')

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        for service_name in self.services_status:
            if self.services_status[service_name] in ["starting", "running"]:
                self.services_status[service_name] = "stopped"

    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if not self.config:
            colored_print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", Colors.RED)
            return

        print_header("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

        for service_name, service in self.config.services.items():
            status = self.services_status[service_name]
            color = Colors.GREEN if status == "running" else Colors.RED if status == "error" else Colors.YELLOW

            enabled_text = "‚úÖ" if service.enabled else "‚è∏Ô∏è"
            colored_print(f"{enabled_text} {service_name}: {status}", color)

    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        print_header("üéõÔ∏è Service Composer")
        print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("2. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("3. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("5. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("="*60)

        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-5): ").strip()
            return choice
        except KeyboardInterrupt:
            return "0"

    def show_config(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self.config:
            colored_print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", Colors.RED)
            return

        print_header("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

        colored_print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑: {self.config_path}", Colors.CYAN)
        colored_print(f"üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {self.config.global_env}", Colors.BLUE)
        colored_print(f"üìù –ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø—É—Å–∫–∞: {self.config.startup_order}", Colors.GREEN)

        print("\nüîß –°–µ—Ä–≤–∏—Å—ã:")
        for name, service in self.config.services.items():
            status_icon = "‚úÖ" if service.enabled else "‚è∏Ô∏è"
            colored_print(f"  {status_icon} {name}:", Colors.BOLD)

            if service.command:
                colored_print(f"    üìú –ö–æ–º–∞–Ω–¥–∞: {' '.join(service.command)}", Colors.BLUE)
            elif service.python_function:
                colored_print(f"    üêç Python —Ñ—É–Ω–∫—Ü–∏—è: {service.python_function}", Colors.BLUE)

            if service.working_dir:
                colored_print(f"    üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {service.working_dir}", Colors.YELLOW)
            if service.depends_on:
                colored_print(f"    üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(service.depends_on)}", Colors.MAGENTA)
            if service.startup_delay:
                colored_print(f"    ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {service.startup_delay} —Å–µ–∫", Colors.CYAN)

    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        while True:
            choice = self.show_menu()

            if choice == "0":
                colored_print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.CYAN)
                break
            elif choice == "1":
                self.run_all_services()
            elif choice == "2":
                self.show_status()
            elif choice == "3":
                if self.config_path:
                    self.load_config(self.config_path)
                else:
                    colored_print("‚ùå –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω", Colors.RED)
            elif choice == "4":
                self.show_config()
            elif choice == "5":
                self.stop_all()
            else:
                colored_print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", Colors.RED)

def main():
    parser = argparse.ArgumentParser(description="Service Composer - –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    parser.add_argument('-c', '--config', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML')
    parser.add_argument('--create-config', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.create_config:
        composer = ServiceComposer()
        composer.create_example_config()
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è composer
    composer = ServiceComposer(args.config)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.config:
        if not composer.load_config(args.config):
            sys.exit(1)
    else:
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        config_files = ['service-composer.yaml', 'service-composer.yml', 'composer.yaml', 'composer.yml']
        config_found = False

        for config_file in config_files:
            if Path(config_file).exists():
                colored_print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}", Colors.CYAN)
                if composer.load_config(config_file):
                    composer.config_path = config_file
                    config_found = True
                    break

        if not config_found:
            colored_print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é --create-config", Colors.RED)
            sys.exit(1)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.status:
        composer.show_status()
    else:
        if len(sys.argv) == 1 or (len(sys.argv) == 3 and args.config):
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            composer.run_interactive()
        else:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
            composer.run_all_services()

if __name__ == "__main__":
    main() 