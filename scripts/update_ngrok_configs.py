#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ ngrok
–ü–æ–ª—É—á–∞–µ—Ç URLs –æ—Ç ngrok API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import requests
import time
import re
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_ngrok_urls(max_retries=30, delay=2):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URLs –æ—Ç ngrok API"""
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ngrok API...")

    for attempt in range(max_retries):
        try:
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                data = response.json()
                urls = {}

                for tunnel in data.get('tunnels', []):
                    public_url = tunnel.get('public_url', '')
                    config = tunnel.get('config', {})
                    addr = config.get('addr', '')
                    proto = tunnel.get('proto', 'unknown')
                    name = tunnel.get('name', 'unnamed')

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—É–Ω–Ω–µ–ª—è –ø–æ –ø–æ—Ä—Ç—É
                    if addr.endswith(':3000') and public_url:
                        urls['frontend'] = {
                            'url': public_url,
                            'addr': addr,
                            'proto': proto,
                            'name': name
                        }
                    elif addr.endswith(':8000') and public_url:
                        urls['backend'] = {
                            'url': public_url,
                            'addr': addr,
                            'proto': proto,
                            'name': name
                        }

                if urls:
                    logger.info(f"‚úÖ ngrok URLs –ø–æ–ª—É—á–µ–Ω—ã: {len(urls)} —Ç—É–Ω–Ω–µ–ª—å(–µ–π)")
                    return urls

        except Exception as e:
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")

        if attempt < max_retries - 1:
            logger.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}...")
            time.sleep(delay)

    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URLs")
    return {}

def update_cors_settings(frontend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ backend"""
    main_py_path = Path("backend/src/main.py")
    if not main_py_path.exists():
        logger.warning("‚ö†Ô∏è –§–∞–π–ª backend/src/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        content = main_py_path.read_text(encoding='utf-8')

        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ origins
        pattern = r'origins = \[(.*?)\]'

        # –ù–æ–≤—ã–µ origins —Å ngrok URL
        origins_list = [
            '"http://localhost:3000"',
            '"http://127.0.0.1:3000"',
            f'"{frontend_url}"'
        ]

        origins_joined = ',\n    '.join(origins_list)
        new_origins = f'[\n    {origins_joined}\n]'

        # –ó–∞–º–µ–Ω–∞
        new_content = re.sub(pattern, f'origins = {new_origins}', content, flags=re.DOTALL)
        main_py_path.write_text(new_content, encoding='utf-8')

        logger.info(f"‚úÖ CORS –æ–±–Ω–æ–≤–ª–µ–Ω: {frontend_url}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CORS: {e}")
        return False

def update_frontend_config(backend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend"""
    config_path = Path("frontend/config.js")
    if not config_path.exists():
        logger.warning("‚ö†Ô∏è –§–∞–π–ª frontend/config.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        content = config_path.read_text(encoding='utf-8')

        # –ó–∞–º–µ–Ω–∞ API_BASE_URL
        pattern = r"API_BASE_URL: ['\"].*?['\"]"
        replacement = f"API_BASE_URL: '{backend_url}/api'"

        new_content = re.sub(pattern, replacement, content)
        config_path.write_text(new_content, encoding='utf-8')

        logger.info(f"‚úÖ Frontend config –æ–±–Ω–æ–≤–ª–µ–Ω: {backend_url}/api")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è frontend config: {e}")
        return False

def update_telegram_bot_config(frontend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
    start_handler_path = Path("tg_bot/handlers/start.py")
    if not start_handler_path.exists():
        logger.warning("‚ö†Ô∏è –§–∞–π–ª tg_bot/handlers/start.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        content = start_handler_path.read_text(encoding='utf-8')

        # –ó–∞–º–µ–Ω–∞ MINI_APP_URL
        pattern = r'MINI_APP_URL = ["\'].*?["\']'
        replacement = f'MINI_APP_URL = "{frontend_url}"'

        new_content = re.sub(pattern, replacement, content)
        start_handler_path.write_text(new_content, encoding='utf-8')

        logger.info(f"‚úÖ Bot config –æ–±–Ω–æ–≤–ª–µ–Ω: {frontend_url}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bot config: {e}")
        return False

def update_bot_api_config(backend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –≤ –±–æ—Ç–µ"""
    files_to_update = [
        "tg_bot/config.py",
        "tg_bot/api/users.py",
        "tg_bot/api/bookings.py",
        "tg_bot/api/timeslots.py"
    ]

    success_count = 0

    for file_path in files_to_update:
        path = Path(file_path)
        if not path.exists():
            continue

        try:
            content = path.read_text(encoding='utf-8')

            # –û–±–Ω–æ–≤–ª—è–µ–º BASE_URL –∏ API_BASE_URL
            patterns = [
                (r'BASE_URL = ["\'].*?["\']', f'BASE_URL = "{backend_url}"'),
                (r'API_BASE_URL = ["\'].*?["\']', f'API_BASE_URL = "{backend_url}/api"')
            ]

            for pattern, replacement in patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, replacement, content)

            path.write_text(content, encoding='utf-8')
            success_count += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")

    if success_count > 0:
        logger.info(f"‚úÖ Bot API config –æ–±–Ω–æ–≤–ª–µ–Ω ({success_count} —Ñ–∞–π–ª–æ–≤): {backend_url}")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ngrok URLs...")

    # –ü–æ–ª—É—á–∞–µ–º URLs –æ—Ç ngrok
    urls = get_ngrok_urls()
    if not urls:
        return False

    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É–Ω–Ω–µ–ª—è—Ö
    print("\n" + "="*60)
    print(" üåê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û NGROK –¢–£–ù–ù–ï–õ–Ø–•")
    print("="*60)

    for service_name, tunnel_info in urls.items():
        print(f"üìã {service_name.upper()}:")
        print(f"   üîó URL:      {tunnel_info['url']}")
        print(f"   üéØ Target:   {tunnel_info['addr']}")
        print(f"   üì° Protocol: {tunnel_info['proto']}")
        print(f"   üè∑Ô∏è  Name:     {tunnel_info['name']}")
        print()

    print("="*60)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    success = True

    if 'frontend' in urls:
        success &= update_cors_settings(urls['frontend']['url'])
        success &= update_telegram_bot_config(urls['frontend']['url'])

    if 'backend' in urls:
        success &= update_frontend_config(urls['backend']['url'])
        success &= update_bot_api_config(urls['backend']['url'])

    if success:
        logger.info("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        if 'frontend' in urls:
            logger.info(f"üì± Mini App URL: {urls['frontend']['url']}")
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å")

    return success

if __name__ == "__main__":
    main() 