#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram Mini App
"""

import http.server
import socketserver
import os
import sys
import mimetypes
import json
from urllib.parse import urlparse

try:
    import requests
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å 'requests' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install requests")
    sys.exit(1)

class CORSHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MIME —Ç–∏–ø—ã
        mimetypes.add_type('application/javascript', '.js')
        mimetypes.add_type('text/css', '.css')
        mimetypes.add_type('text/html', '.html')
        super().__init__(*args, **kwargs)

    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∞
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        super().end_headers()
    
    def do_GET(self):
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        self.log_message("GET request for %s", self.path)

        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä—Å–∏–∏ –∏–∑ –ø—É—Ç–∏
        parsed_path = urlparse(self.path)
        clean_path = parsed_path.path

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend
        if clean_path == '/api/config':
            return self.handle_config_request()

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å, –æ—Ç–¥–∞–µ–º index.html
        if clean_path == '/' or clean_path == '':
            clean_path = '/index.html'
            self.path = '/index.html'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_path = self.translate_path(clean_path)
        if os.path.isfile(file_path):
            return super().do_GET()
        else:
            self.log_message("File not found: %s", file_path)
            self.send_error(404, "File not found")

    def handle_config_request(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend URL"""
        try:
            self.log_message("Config request: fetching ngrok tunnels...")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ngrok API –ª–æ–∫–∞–ª—å–Ω–æ
            response = requests.get('http://localhost:4040/api/tunnels', timeout=5)
            response.raise_for_status()
            
            data = response.json()
            tunnels = data.get('tunnels', [])
            
            # –ò—â–µ–º —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è backend (localhost:8000)
            backend_tunnel = None
            for tunnel in tunnels:
                if tunnel.get('config', {}).get('addr') == 'http://localhost:8000':
                    backend_tunnel = tunnel
                    break
            
            if backend_tunnel:
                backend_url = f"{backend_tunnel['public_url']}/api"
                config_data = {
                    "backend_url": backend_url,
                    "status": "success"
                }
                self.log_message("Config success: backend URL = %s", backend_url)
            else:
                config_data = {
                    "error": "Backend tunnel not found. Make sure ngrok is proxying localhost:8000",
                    "status": "error"
                }
                self.log_message("Config error: backend tunnel not found")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            json_response = json.dumps(config_data, ensure_ascii=False)
            self.wfile.write(json_response.encode('utf-8'))
            
        except requests.exceptions.RequestException as e:
            # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ngrok
            self.log_message("Config error: ngrok API unavailable - %s", str(e))
            error_data = {
                "error": f"Ngrok API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}",
                "status": "error"
            }
            
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            json_response = json.dumps(error_data, ensure_ascii=False)
            self.wfile.write(json_response.encode('utf-8'))
            
        except Exception as e:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞
            self.log_message("Config error: unexpected error - %s", str(e))
            error_data = {
                "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "status": "error"
            }
            
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            json_response = json.dumps(error_data, ensure_ascii=False)
            self.wfile.write(json_response.encode('utf-8'))

    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.end_headers()
    
    def log_message(self, format, *args):
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        sys.stderr.write("[%s] %s\n" % (self.log_date_time_string(), format % args))

def main():
    # –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    PORT = 3000
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–∞–π–ª–∞–º–∏
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    with socketserver.TCPServer(("", PORT), CORSHTTPRequestHandler) as httpd:
        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
        print(f"üìÅ –û–±—Å–ª—É–∂–∏–≤–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print(f"üåê Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{PORT}/index.html")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)
        
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            httpd.shutdown()

if __name__ == "__main__":
    main()

