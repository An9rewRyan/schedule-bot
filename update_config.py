#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok URLs
"""

import requests
import re
from pathlib import Path

def get_ngrok_urls():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö URLs –æ—Ç ngrok API"""
    try:
        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            data = response.json()
            urls = {}
            
            for tunnel in data.get('tunnels', []):
                name = tunnel.get('name', '')
                public_url = tunnel.get('public_url', '')
                config = tunnel.get('config', {})
                addr = config.get('addr', '')
                
                if ('frontend' in name or addr.endswith(':3000')) and public_url:
                    urls['frontend'] = public_url
                elif ('backend' in name or addr.endswith(':8000')) and public_url:
                    urls['backend'] = public_url
            
            return urls
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ngrok URLs: {e}")
        return {}

def update_telegram_bot_config(frontend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
    print(f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å URL: {frontend_url}")
    
    start_handler_path = Path("tg_bot/handlers/start.py")
    if not start_handler_path.exists():
        print("‚ùå –§–∞–π–ª tg_bot/handlers/start.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    try:
        content = start_handler_path.read_text(encoding='utf-8')
        
        # –ó–∞–º–µ–Ω–∞ MINI_APP_URL
        pattern = r'MINI_APP_URL = ["\'].*?["\']'
        replacement = f'MINI_APP_URL = "{frontend_url}"'
        
        new_content = re.sub(pattern, replacement, content)
        start_handler_path.write_text(new_content, encoding='utf-8')
        
        print(f"‚úÖ Bot config –æ–±–Ω–æ–≤–ª–µ–Ω —Å URL: {frontend_url}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bot config: {e}")
        return False

def update_cors_settings(backend_url, frontend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ backend"""
    print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    main_py_path = Path("backend/src/main.py")
    if not main_py_path.exists():
        print("‚ùå –§–∞–π–ª backend/src/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    try:
        content = main_py_path.read_text(encoding='utf-8')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ origins
        pattern = r'origins = \[(.*?)\]'
        
        # –ù–æ–≤—ã–µ origins —Å ngrok URL
        new_origins = f'''[
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "{backend_url}",
    "{frontend_url}"
]'''
        
        # –ó–∞–º–µ–Ω–∞
        new_content = re.sub(pattern, f'origins = {new_origins}', content, flags=re.DOTALL)
        main_py_path.write_text(new_content, encoding='utf-8')
        
        print(f"‚úÖ CORS –æ–±–Ω–æ–≤–ª–µ–Ω —Å URLs: {backend_url}, {frontend_url}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CORS: {e}")
        return False

def update_frontend_config(backend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend"""
    print(f"üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend...")
    
    config_path = Path("frontend/config.js")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª frontend/config.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    try:
        content = config_path.read_text(encoding='utf-8')
        
        # –ó–∞–º–µ–Ω–∞ API_BASE_URL
        pattern = r"API_BASE_URL: ['\"].*?['\"]"
        replacement = f"API_BASE_URL: '{backend_url}/api'"
        
        new_content = re.sub(pattern, replacement, content)
        config_path.write_text(new_content, encoding='utf-8')
        
        print(f"‚úÖ Frontend config –æ–±–Ω–æ–≤–ª–µ–Ω —Å URL: {backend_url}/api")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è frontend config: {e}")
        return False

def update_bot_api_config(backend_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –≤ –±–æ—Ç–µ"""
    print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    files_to_update = [
        "tg_bot/config.py",
        "tg_bot/api/users.py", 
        "tg_bot/api/bookings.py",
        "tg_bot/api/timeslots.py"
    ]
    
    success_count = 0
    
    for file_path in files_to_update:
        path = Path(file_path)
        if not path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        try:
            content = path.read_text(encoding='utf-8')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º BASE_URL –∏ API_BASE_URL
            patterns = [
                (r'BASE_URL = ["\'].*?["\']', f'BASE_URL = "{backend_url}"'),
                (r'API_BASE_URL = ["\'].*?["\']', f'API_BASE_URL = "{backend_url}/api"')
            ]
            
            updated = False
            for pattern, replacement in patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, replacement, content)
                    updated = True
                    
            if updated:
                path.write_text(content, encoding='utf-8')
                success_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
    
    if success_count > 0:
        print(f"‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({success_count} —Ñ–∞–π–ª–æ–≤)")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞")
        return False

def main():
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok URLs...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ URLs –æ—Ç ngrok
    urls = get_ngrok_urls()
    if not urls:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URLs. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ngrok –∑–∞–ø—É—â–µ–Ω.")
        return
    
    frontend_url = urls.get('frontend')
    backend_url = urls.get('backend')
    
    print(f"üìã –¢–µ–∫—É—â–∏–µ ngrok URLs:")
    print(f"  Frontend: {frontend_url}")
    print(f"  Backend: {backend_url}")
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    success = True
    
    if frontend_url:
        success &= update_telegram_bot_config(frontend_url)
    
    if backend_url:
        success &= update_bot_api_config(backend_url)
        if frontend_url:
            success &= update_cors_settings(backend_url, frontend_url)
            success &= update_frontend_config(backend_url)
    
    print("=" * 60)
    if success:
        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        print()
        print("üì± –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini App –≤ Telegram:")
        print(f"   Mini App URL: {frontend_url}")
        print()
        print("üîÑ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å")

if __name__ == "__main__":
    main() 