#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Mini App —Å –≤–∏–¥–∏–º—ã–º–∏ –ª–æ–≥–∞–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_dev.py          # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    python run_dev.py backend  # –¢–æ–ª—å–∫–æ backend
    python run_dev.py bot      # –¢–æ–ª—å–∫–æ telegram bot  
    python run_dev.py frontend # –¢–æ–ª—å–∫–æ frontend
    python run_dev.py ngrok    # –¢–æ–ª—å–∫–æ ngrok
    python run_dev.py local    # Backend + Frontend + Bot (–±–µ–∑ ngrok)
    python run_dev.py all      # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å ngrok –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import subprocess
import sys
import time
import signal
import os
import threading
import queue
import logging
import re
import requests
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'

def colored_print(text, color, prefix=""):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º"""
    print(f"{color}{prefix}{text}{Colors.RESET}")

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*60)
    colored_print(f" {title} ", Colors.BOLD + Colors.CYAN)
    print("="*60)

class ServiceRunner:
    def __init__(self):
        self.processes = []
        self.threads = []
        self.running = True
        self.ngrok_urls = {}
        self.backend_url = ""
        self.frontend_url = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        colored_print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...", Colors.YELLOW)
        self.stop_all()
        sys.exit(0)
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.running = False
        colored_print("üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...", Colors.YELLOW)
        
        for proc in self.processes:
            try:
                proc.terminate()
                proc.wait(timeout=5)
            except:
                try:
                    proc.kill()
                except:
                    pass
        
        for thread in self.threads:
            thread.join(timeout=1)
    
    def read_output(self, proc, service_name, color):
        """–ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.running and proc.poll() is None:
            try:
                line = proc.stdout.readline()
                if line:
                    line = line.decode('utf-8', errors='ignore').rstrip()
                    if line:  # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        colored_print(line, color, f"[{service_name}] ")
            except:
                break
    
    def run_service(self, command, service_name, color, cwd=None):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤"""
        try:
            colored_print(f"üöÄ –ó–∞–ø—É—Å–∫ {service_name}...", Colors.GREEN)
            colored_print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}", Colors.BLUE)
            
            proc = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=cwd,
                bufsize=1,
                universal_newlines=False
            )
            
            self.processes.append(proc)
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
            thread = threading.Thread(
                target=self.read_output, 
                args=(proc, service_name, color),
                daemon=True
            )
            thread.start()
            self.threads.append(thread)
            
            return proc
            
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service_name}: {e}", Colors.RED)
            return None
    
    def wait_for_startup(self, seconds=3):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        colored_print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ ({seconds} —Å–µ–∫)...", Colors.YELLOW)
        time.sleep(seconds)
    
    def get_ngrok_urls(self, max_retries=30, delay=2):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URLs –æ—Ç ngrok API"""
        for attempt in range(max_retries):
            try:
                response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    urls = {}
                    
                    for tunnel in data.get('tunnels', []):
                        name = tunnel.get('name', '')
                        public_url = tunnel.get('public_url', '')
                        config = tunnel.get('config', {})
                        addr = config.get('addr', '')
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—É–Ω–Ω–µ–ª—è –ø–æ –ø–æ—Ä—Ç—É –∏–ª–∏ –∏–º–µ–Ω–∏
                        if ('frontend' in name or addr.endswith(':3000')) and public_url:
                            urls['frontend'] = public_url
                            self.frontend_url = public_url
                        elif ('backend' in name or addr.endswith(':8000')) and public_url:
                            urls['backend'] = public_url
                            self.backend_url = public_url
                    
                    if urls:
                        self.ngrok_urls = urls
                        colored_print("‚úÖ ngrok URLs –ø–æ–ª—É—á–µ–Ω—ã:", Colors.GREEN)
                        for name, url in urls.items():
                            colored_print(f"  {name}: {url}", Colors.CYAN)
                        return urls
                        
            except Exception as e:
                if attempt < max_retries - 1:
                    colored_print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ngrok... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})", Colors.YELLOW)
                    time.sleep(delay)
                else:
                    colored_print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URLs: {e}", Colors.RED)
        
        return {}
    
    def update_cors_settings(self, backend_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ backend"""
        colored_print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫...", Colors.YELLOW)
        
        main_py_path = Path("backend/src/main.py")
        if not main_py_path.exists():
            colored_print("‚ùå –§–∞–π–ª backend/src/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
            
        try:
            content = main_py_path.read_text(encoding='utf-8')
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ origins
            pattern = r'origins = \[(.*?)\]'
            
            # –ù–æ–≤—ã–µ origins —Å ngrok URL (–¥–ª—è CORS –Ω—É–∂–µ–Ω frontend URL)
            origins_list = [
                '"http://localhost:3000"',
                '"http://127.0.0.1:3000"'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º frontend URL –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.frontend_url:
                origins_list.append(f'"{self.frontend_url}"')
            
            origins_joined = ',\n    '.join(origins_list)
            new_origins = f'''[
    {origins_joined}
]'''
            
            # –ó–∞–º–µ–Ω–∞
            new_content = re.sub(pattern, f'origins = {new_origins}', content, flags=re.DOTALL)
            main_py_path.write_text(new_content, encoding='utf-8')
            
            colored_print(f"‚úÖ CORS –æ–±–Ω–æ–≤–ª–µ–Ω —Å frontend URL: {self.frontend_url}", Colors.GREEN)
            return True
            
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CORS: {e}", Colors.RED)
            return False
    
    def update_frontend_config(self, backend_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend"""
        colored_print("üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend...", Colors.YELLOW)
        
        config_path = Path("frontend/config.js")
        if not config_path.exists():
            colored_print("‚ùå –§–∞–π–ª frontend/config.js –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
            
        try:
            content = config_path.read_text(encoding='utf-8')
            
            # –ó–∞–º–µ–Ω–∞ API_BASE_URL
            pattern = r"API_BASE_URL: ['\"].*?['\"]"
            replacement = f"API_BASE_URL: '{backend_url}/api'"
            
            new_content = re.sub(pattern, replacement, content)
            config_path.write_text(new_content, encoding='utf-8')
            
            colored_print(f"‚úÖ Frontend config –æ–±–Ω–æ–≤–ª–µ–Ω —Å URL: {backend_url}/api", Colors.GREEN)
            return True
            
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è frontend config: {e}", Colors.RED)
            return False
    
    def update_telegram_bot_config(self, frontend_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
        colored_print("ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", Colors.YELLOW)
        
        start_handler_path = Path("tg_bot/handlers/start.py")
        if not start_handler_path.exists():
            colored_print("‚ùå –§–∞–π–ª tg_bot/handlers/start.py –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False
            
        try:
            content = start_handler_path.read_text(encoding='utf-8')
            
            # –ó–∞–º–µ–Ω–∞ MINI_APP_URL (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
            pattern = r'MINI_APP_URL = ["\'].*?["\']'
            replacement = f'MINI_APP_URL = "{frontend_url}"'
            
            new_content = re.sub(pattern, replacement, content)
            start_handler_path.write_text(new_content, encoding='utf-8')
            
            colored_print(f"‚úÖ Bot config –æ–±–Ω–æ–≤–ª–µ–Ω —Å URL: {frontend_url}", Colors.GREEN)
            return True
            
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bot config: {e}", Colors.RED)
            return False
    
    def update_bot_api_config(self, backend_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –≤ –±–æ—Ç–µ"""
        colored_print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...", Colors.YELLOW)
        
        files_to_update = [
            "tg_bot/config.py",
            "tg_bot/api/users.py", 
            "tg_bot/api/bookings.py",
            "tg_bot/api/timeslots.py"
        ]
        
        success_count = 0
        
        for file_path in files_to_update:
            path = Path(file_path)
            if not path.exists():
                colored_print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.YELLOW)
                continue
                
            try:
                content = path.read_text(encoding='utf-8')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º BASE_URL –∏ API_BASE_URL
                patterns = [
                    (r'BASE_URL = ["\'].*?["\']', f'BASE_URL = "{backend_url}"'),
                    (r'API_BASE_URL = ["\'].*?["\']', f'API_BASE_URL = "{backend_url}/api"')
                ]
                
                for pattern, replacement in patterns:
                    if re.search(pattern, content):
                        content = re.sub(pattern, replacement, content)
                        
                path.write_text(content, encoding='utf-8')
                success_count += 1
                
            except Exception as e:
                colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}", Colors.RED)
        
        if success_count > 0:
            colored_print(f"‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({success_count} —Ñ–∞–π–ª–æ–≤)", Colors.GREEN)
            return True
        else:
            colored_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞", Colors.RED)
            return False
    
    def update_ngrok_config(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok URLs"""
        colored_print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok URLs...", Colors.CYAN)
        
        urls = self.get_ngrok_urls()
        if not urls:
            colored_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URLs. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ngrok –∑–∞–ø—É—â–µ–Ω.", Colors.RED)
            return False
        
        colored_print("üìã –¢–µ–∫—É—â–∏–µ ngrok URLs:", Colors.CYAN)
        colored_print(f"  Frontend: {self.frontend_url}", Colors.GREEN)
        colored_print(f"  Backend: {self.backend_url}", Colors.GREEN)
        
        success = True
        
        if self.frontend_url:
            success &= self.update_telegram_bot_config(self.frontend_url)
        
        if self.backend_url:
            success &= self.update_bot_api_config(self.backend_url)
            success &= self.update_frontend_config(self.backend_url)
            if self.frontend_url:
                success &= self.update_cors_settings(self.backend_url)
        
        if success:
            colored_print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", Colors.GREEN)
            colored_print("üì± –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini App –≤ Telegram:", Colors.YELLOW)
            colored_print(f"   Mini App URL: {self.frontend_url}", Colors.CYAN)
            colored_print("üîÑ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!", Colors.YELLOW)
        else:
            colored_print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å", Colors.RED)
        
        return success
    
    def run_backend(self):
        """–ó–∞–ø—É—Å–∫ backend API"""
        return self.run_service(
            ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"],
            "Backend API",
            Colors.GREEN,
            cwd="backend"
        )
    
    def run_frontend(self):
        """–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.run_service(
            ["python", "server.py"],
            "Frontend",
            Colors.BLUE,
            cwd="frontend"
        )
    
    def run_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        return self.run_service(
            ["python", "main.py"],
            "Telegram Bot",
            Colors.MAGENTA,
            cwd="tg_bot"
        )
    
    def run_ngrok(self):
        """–ó–∞–ø—É—Å–∫ ngrok"""
        return self.run_service(
            ["ngrok", "start", "--config", "ngrok.yml", "--all"],
            "ngrok",
            Colors.CYAN
        )
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        print_header("üöÄ Mini App Development Server")
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("1. üöÄ Backend API (FastAPI)")
        print("2. üé® Frontend Server")  
        print("3. ü§ñ Telegram Bot")
        print("4. üåê ngrok (HTTPS tunnels)")
        print("5. üî• Backend + Bot")
        print("6. üåç Frontend + ngrok (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
        print("7. üéØ –í–°–ï –°–ï–†–í–ò–°–´ (—Å ngrok –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
        print("8. üíª Backend + Frontend + Bot (–ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ ngrok)")
        print("9. üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ngrok URLs")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("="*60)
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-9): ").strip()
            return choice
        except KeyboardInterrupt:
            return "0"
    
    def run_by_choice(self, choice):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        services = []
        
        if choice == "1":
            services = [("backend", self.run_backend)]
        elif choice == "2":
            services = [("frontend", self.run_frontend)]
        elif choice == "3":
            services = [("bot", self.run_telegram_bot)]
        elif choice == "4":
            services = [("ngrok", self.run_ngrok)]
        elif choice == "5":
            services = [("backend", self.run_backend), ("bot", self.run_telegram_bot)]
        elif choice == "6":
            services = [("frontend", self.run_frontend), ("ngrok", self.run_ngrok)]
        elif choice == "7":
            services = [
                ("backend", self.run_backend),
                ("frontend", self.run_frontend), 
                ("bot", self.run_telegram_bot),
                ("ngrok", self.run_ngrok)
            ]
        elif choice == "8":
            services = [
                ("backend", self.run_backend),
                ("frontend", self.run_frontend), 
                ("bot", self.run_telegram_bot)
            ]
        elif choice == "9":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ngrok URLs
            self.update_ngrok_config()
            return True
        else:
            return False
        
        return self.run_services(services)
    
    def run_services(self, services):
        """–ó–∞–ø—É—Å–∫ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print_header(f"–ó–∞–ø—É—Å–∫ {len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        has_ngrok = any("ngrok" in service_name for service_name, _ in services)
        has_backend = any("backend" in service_name for service_name, _ in services)
        has_frontend = any("frontend" in service_name for service_name, _ in services)
        has_bot = any("bot" in service_name for service_name, _ in services)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å ngrok, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∏ –ø–æ–ª—É—á–∞–µ–º URLs
        if has_ngrok:
            colored_print("üåê –ó–∞–ø—É—Å–∫ ngrok...", Colors.CYAN)
            for service_name, service_func in services:
                if "ngrok" in service_name:
                    proc = service_func()
                    if proc is None:
                        colored_print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}", Colors.RED)
                        return False
                    break
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URLs
            time.sleep(3)
            colored_print("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ ngrok URLs...", Colors.CYAN)
            urls = self.get_ngrok_urls()
            
            if urls:
                colored_print("üìã –¢–µ–∫—É—â–∏–µ ngrok URLs:", Colors.CYAN)
                colored_print(f"  Frontend: {self.frontend_url}", Colors.GREEN)
                colored_print(f"  Backend: {self.backend_url}", Colors.GREEN)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –î–û –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                if has_backend and self.frontend_url:
                    colored_print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º backend...", Colors.YELLOW)
                    self.update_cors_settings(self.backend_url)
                
                if has_frontend and self.backend_url:
                    self.update_frontend_config(self.backend_url)
                
                if has_bot:
                    if self.frontend_url:
                        self.update_telegram_bot_config(self.frontend_url)
                    if self.backend_url:
                        self.update_bot_api_config(self.backend_url)
            else:
                colored_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URLs", Colors.RED)
        
        # –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫—Ä–æ–º–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ ngrok)
        for service_name, service_func in services:
            if "ngrok" not in service_name:  # ngrok —É–∂–µ –∑–∞–ø—É—â–µ–Ω
                proc = service_func()
                if proc is None:
                    colored_print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}", Colors.RED)
                    return False
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
        self.wait_for_startup()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        if has_ngrok and self.frontend_url:
            colored_print("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", Colors.GREEN)
            colored_print("üì± –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini App –≤ Telegram:", Colors.YELLOW)
            colored_print(f"   Mini App URL: {self.frontend_url}", Colors.CYAN)
        
        colored_print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!", Colors.GREEN)
        colored_print("üìù –õ–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", Colors.YELLOW)
        print("="*60 + "\n")
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            while self.running and any(proc.poll() is None for proc in self.processes):
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()
        
        return True

def main():
    runner = ServiceRunner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        services_map = {
            "backend": [("backend", runner.run_backend)],
            "frontend": [("frontend", runner.run_frontend)],
            "bot": [("bot", runner.run_telegram_bot)],
            "ngrok": [("ngrok", runner.run_ngrok)],
            "local": [
                ("backend", runner.run_backend),
                ("frontend", runner.run_frontend),
                ("bot", runner.run_telegram_bot)
            ],
            "all": [
                ("backend", runner.run_backend),
                ("frontend", runner.run_frontend),
                ("bot", runner.run_telegram_bot),
                ("ngrok", runner.run_ngrok)
            ]
        }
        
        if arg in services_map:
            runner.run_services(services_map[arg])
        else:
            colored_print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}", Colors.RED)
            colored_print("–î–æ—Å—Ç—É–ø–Ω—ã–µ: backend, frontend, bot, ngrok, local, all", Colors.YELLOW)
            sys.exit(1)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        while True:
            choice = runner.show_menu()
            
            if choice == "0":
                colored_print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.CYAN)
                break
            
            if runner.run_by_choice(choice):
                break
            else:
                colored_print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", Colors.RED)

if __name__ == "__main__":
    main() 