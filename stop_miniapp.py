#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Mini App
–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ run_dev.py
"""

import subprocess
import sys
import os
import signal
import psutil
import time

class MiniAppStopper:
    def __init__(self):
        self.stopped_processes = 0
        
    def find_and_kill_processes(self, process_names):
        """–ù–∞–π—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∞–º"""
        killed = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                
                for name in process_names:
                    if (name in proc.info['name'] or 
                        name in cmdline or
                        any(name in arg for arg in proc.info['cmdline'] if arg)):
                        
                        print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {proc.info['name']} (PID: {proc.info['pid']})")
                        proc.terminate()
                        killed += 1
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            print(f"‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                            proc.kill()
                            
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
                
        return killed
    
    def stop_ngrok(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok"""
        print("üåê –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok...")
        killed = self.find_and_kill_processes(['ngrok'])
        if killed > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ngrok")
        else:
            print("‚ÑπÔ∏è  ngrok –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def stop_backend(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Backend API...")
        killed = self.find_and_kill_processes(['uvicorn', 'src.main:app'])
        if killed > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed} backend –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è  Backend –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def stop_frontend(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å frontend —Å–µ—Ä–≤–µ—Ä"""
        print("üé® –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Frontend...")
        killed = self.find_and_kill_processes(['server.py', 'python server.py'])
        if killed > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed} frontend –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è  Frontend –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram –±–æ—Ç–∞"""
        print("ü§ñ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram Bot...")
        killed = self.find_and_kill_processes(['main.py', 'python main.py'])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É - aiogram
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                if 'aiogram' in cmdline or 'telegram' in cmdline.lower():
                    print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram Bot (PID: {proc.info['pid']})")
                    proc.terminate()
                    killed += 1
                    try:
                        proc.wait(timeout=3)
                    except psutil.TimeoutExpired:
                        proc.kill()
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if killed > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed} bot –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è  Bot –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def stop_run_dev_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å run_dev.py"""
        print("‚öôÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º run_dev.py...")
        killed = self.find_and_kill_processes(['run_dev.py', 'python run_dev.py'])
        if killed > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed} run_dev.py –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è  run_dev.py –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def cleanup_ports(self):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        ports = [3000, 8000, 4040]  # frontend, backend, ngrok admin
        
        print("üîß –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã...")
        for port in ports:
            try:
                # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç
                result = subprocess.run(
                    ['lsof', '-ti', f':{port}'], 
                    capture_output=True, 
                    text=True
                )
                
                if result.stdout.strip():
                    pids = result.stdout.strip().split('\n')
                    for pid in pids:
                        try:
                            os.kill(int(pid), signal.SIGTERM)
                            print(f"üõë –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø–æ—Ä—Ç {port} (PID: {pid})")
                        except (OSError, ValueError):
                            pass
                            
            except FileNotFoundError:
                # lsof –Ω–µ –Ω–∞–π–¥–µ–Ω (Windows)
                pass
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã Mini App...")
        print("=" * 50)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        self.stop_run_dev_processes()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        time.sleep(1)
        
        # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.stop_telegram_bot()
        self.stop_backend()
        self.stop_frontend()
        self.stop_ngrok()
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
        self.cleanup_ports()
        
        print("=" * 50)
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python run_dev.py")

def main():
    if len(sys.argv) > 1:
        service = sys.argv[1].lower()
        stopper = MiniAppStopper()
        
        if service == "ngrok":
            stopper.stop_ngrok()
        elif service == "backend":
            stopper.stop_backend()
        elif service == "frontend":
            stopper.stop_frontend()
        elif service == "bot":
            stopper.stop_telegram_bot()
        elif service == "all":
            stopper.stop_all()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ: all, ngrok, backend, frontend, bot")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
        stopper = MiniAppStopper()
        stopper.stop_all()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1) 