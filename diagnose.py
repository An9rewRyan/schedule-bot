#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
"""

import subprocess
import sys
import os
import platform
import requests
from pathlib import Path

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...")
    version = sys.version_info
    print(f"–í–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 8:
        print("‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False

def check_virtual_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"–ü—É—Ç—å: {sys.prefix}")
        return True
    else:
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: source .venv/bin/activate")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi',
        'uvicorn',
        'sqlalchemy',
        'psycopg2-binary',
        'aiogram',
        'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_dirs = [
        'backend',
        'backend/src',
        'backend/src/api',
        'backend/src/models',
        'frontend',
        'tg_bot'
    ]
    
    required_files = [
        'backend/src/main.py',
        'backend/requirements.txt',
        'frontend/index.html',
        'frontend/server.py',
        'tg_bot/main.py'
    ]
    
    missing_items = []
    
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/")
            missing_items.append(dir_path)
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            missing_items.append(file_path)
    
    if missing_items:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_items)}")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤"""
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    
    ports = [8000, 3000]
    
    for port in ports:
        try:
            response = requests.get(f'http://localhost:{port}', timeout=2)
            print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except requests.exceptions.ConnectionError:
            print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")
        except Exception as e:
            print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")

def check_ngrok():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ngrok"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ ngrok...")
    
    try:
        result = subprocess.run(['ngrok', 'version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Ngrok –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API ngrok
            try:
                response = requests.get('http://localhost:4040/api/tunnels', timeout=2)
                if response.status_code == 200:
                    print("‚úÖ Ngrok API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    tunnels = response.json()['tunnels']
                    for tunnel in tunnels:
                        print(f"  - {tunnel['proto']}: {tunnel['public_url']}")
                else:
                    print("‚ö†Ô∏è  Ngrok API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except:
                print("‚ö†Ô∏è  Ngrok –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
            return True
        else:
            print("‚ùå Ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    
    constants_file = Path("tg_bot/constants.py")
    if not constants_file.exists():
        print("‚ùå –§–∞–π–ª tg_bot/constants.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(constants_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'BOT_TOKEN' in content:
            print("‚úÖ –§–∞–π–ª constants.py –Ω–∞–π–¥–µ–Ω")
            if '–≤–∞—à_—Ç–æ–∫–µ–Ω' in content or 'YOUR_TOKEN' in content:
                print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder)")
                return False
            else:
                print("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True
        else:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –±—ç–∫–µ–Ω–¥–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞...")
    try:
        response = requests.get('http://localhost:8000/api', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  –ë—ç–∫–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
    except:
        print("‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    try:
        response = requests.get('http://localhost:3000', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è  –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
    except:
        print("‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def main():
    print("=" * 60)
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Mini App")
    print("=" * 60)
    
    checks = [
        check_python,
        check_virtual_env,
        check_dependencies,
        check_project_structure,
        check_ports,
        check_ngrok,
        check_bot_token
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result if result is not None else False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
        print("  python run_dev.py")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if not results[0]:  # Python
            print("- –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.8+")
        
        if not results[1]:  # Virtual env
            print("- –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        if not results[2]:  # Dependencies
            print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        
        if not results[3]:  # Structure
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
        
        if not results[5]:  # Ngrok
            print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok: python check_ngrok.py")
        
        if not results[6]:  # Bot token
            print("- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ tg_bot/constants.py")
    
    print("\nüìã –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞:")
    print("  python run_dev.py         - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print("  python run_dev.py all     - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("  python run_dev.py local   - –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ ngrok)")
    print("  python check_ngrok.py     - –ü—Ä–æ–≤–µ—Ä–∫–∞ ngrok")

if __name__ == "__main__":
    main() 