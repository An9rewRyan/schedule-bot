#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Mini App
"""

import os
import sys
import time
from pathlib import Path
import argparse

def tail_file(file_path, lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            file_lines = f.readlines()
            return file_lines[-lines:]
    except FileNotFoundError:
        return [f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω\n"]
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}\n"]

def follow_file(file_path):
    """–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∞–π–ª–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.seek(0, 2)
            
            print(f"üìÑ –°–ª–µ–¥–∏–º –∑–∞ —Ñ–∞–π–ª–æ–º: {file_path}")
            print("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
            
            while True:
                line = f.readline()
                if line:
                    print(line.rstrip())
                else:
                    time.sleep(0.1)
                    
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_all_logs(lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ start_miniapp_https.py")
        return
        
    log_files = {
        "üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥": "miniapp_starter.log",
        "üåê Ngrok": "ngrok.log", 
        "üîß Backend": "backend.log",
        "üíª Frontend": "frontend.log",
        "ü§ñ Telegram Bot": "telegram_bot.log"
    }
    
    for title, filename in log_files.items():
        log_path = logs_dir / filename
        print(f"\n{'='*60}")
        print(f"{title} ({filename})")
        print(f"{'='*60}")
        
        if log_path.exists():
            log_lines = tail_file(log_path, lines)
            for line in log_lines:
                print(line.rstrip())
        else:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def list_log_files():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:")
    print("-" * 40)
    
    for log_file in logs_dir.glob("*.log"):
        size = log_file.stat().st_size
        size_str = f"{size:,} –±–∞–π—Ç" if size < 1024 else f"{size/1024:.1f} –ö–ë"
        print(f"üìÑ {log_file.name} ({size_str})")
        
    if not list(logs_dir.glob("*.log")):
        print("–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Mini App —Å–µ—Ä–≤–∏—Å–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python view_logs.py                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏
  python view_logs.py -f backend.log     # –°–ª–µ–¥–∏—Ç—å –∑–∞ backend –ª–æ–≥–æ–º
  python view_logs.py -t 100             # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
  python view_logs.py -l                 # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
  python view_logs.py -s ngrok           # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ ngrok –ª–æ–≥
        """
    )
    
    parser.add_argument('-f', '--follow', 
                       help='–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∞–π–ª–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('-t', '--tail', type=int, default=50,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('-l', '--list', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤')
    parser.add_argument('-s', '--service', 
                       choices=['main', 'ngrok', 'backend', 'frontend', 'bot'],
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞')
    
    args = parser.parse_args()
    
    if args.list:
        list_log_files()
        return
        
    if args.follow:
        log_path = Path("logs") / args.follow
        follow_file(log_path)
        return
        
    if args.service:
        logs_dir = Path("logs")
        service_files = {
            'main': 'miniapp_starter.log',
            'ngrok': 'ngrok.log',
            'backend': 'backend.log', 
            'frontend': 'frontend.log',
            'bot': 'telegram_bot.log'
        }
        
        log_file = logs_dir / service_files[args.service]
        if log_file.exists():
            print(f"üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ {args.service}:")
            print("-" * 40)
            log_lines = tail_file(log_file, args.tail)
            for line in log_lines:
                print(line.rstrip())
        else:
            print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {args.service} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
    show_all_logs(args.tail)

if __name__ == "__main__":
    main() 