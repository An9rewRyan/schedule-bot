from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from middlewares.role_middleware import requires_role
from typing import Union
from api.users import get_user, set_admin_role
from api.bookings import get_bookings_for_user
from aiogram import Router, F
from aiogram.types import Message
import logging

router = Router()
logger = logging.getLogger('SuperBot')

# Mini App URL - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
MINI_APP_URL = "https://your-domain.com/frontend/index.html"

@router.message(Command("start"))
async def cmd_start(message: Message, **kwargs):
    telegram_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    is_authenticated, is_admin, user_name = await get_user(telegram_id)
    
    if is_authenticated:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéØ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=MINI_APP_URL)
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
                        callback_data="user_bookings"
                    )
                ]
            ]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if is_admin:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                    callback_data="admin_panel"
                )
            ])
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üéØ\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        telegram_username = message.from_user.username
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {telegram_username}! üëã\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=get_register_keyboard()
        )

@router.message(Command("app"))
async def cmd_app(message: Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Mini App"""
    telegram_id = message.from_user.id
    is_authenticated, is_admin, user_name = await get_user(telegram_id)
    
    if not is_authenticated:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )
            ]
        ]
    )
    
    await message.answer(
        "–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "open_app")
async def open_app_handler(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"""
    telegram_id = query.from_user.id
    is_authenticated, is_admin, user_name = await get_user(telegram_id)
    
    if not is_authenticated:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º Mini App
    await query.answer()
    await query.message.answer(
        "–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéØ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=MINI_APP_URL)
                    )
                ]
            ]
        )
    )

@router.callback_query(F.data == "test_admin")
async def test_admin_handler(query: CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º¬ª.
    """
    telegram_id = query.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    response = await set_admin_role(telegram_id)
    if response.status_code != 200:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–æ–ª—å", show_alert=True)
        return

    # –ü–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞
    updated_user = response.json()
    is_admin = updated_user.get("is_admin", False)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
                    callback_data="user_bookings"
                )
            ]
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if is_admin:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )
        ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await query.message.edit_reply_markup(reply_markup=keyboard)
    await query.answer("–†–æ–ª—å –∞–¥–º–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!")

@router.message(Command("admin"))
@router.callback_query(F.data == "admin_panel")
@requires_role("admin")
async def admin_command(event: Union[Message, CallbackQuery], **kwargs):
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /admin –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ê–¥–º–∏–Ω¬ª.
    """
    if isinstance(event, CallbackQuery):
        await event.answer()
        await event.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Mini App")
    else:
        await event.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Mini App")

def get_register_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    callback_data="register_user"
                )
            ]
        ]
    ) 