#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram Mini App —Å HTTPS —á–µ—Ä–µ–∑ ngrok
"""

import subprocess
import sys
import os
import time
import signal
import threading
import requests
import json
from pathlib import Path
import platform

def free_port(port):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–Ω—è—Ç (macOS/Linux)"""
    try:
        # lsof -i :<port> | awk 'NR>1 {print $2}' | xargs kill -9
        result = subprocess.run(
            f"lsof -ti :{port}", shell=True, capture_output=True, text=True
        )
        pids = result.stdout.strip().split('\n')
        for pid in pids:
            if pid:
                print(f"üõë –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                subprocess.run(["kill", "-9", pid])
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}: {e}")

class MiniAppHTTPSLauncher:
    def __init__(self):
        self.processes = []
        self.running = True
        self.ngrok_url = None
        
    def check_ngrok(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ngrok"""
        try:
            result = subprocess.run(['ngrok', 'version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Ngrok –Ω–∞–π–¥–µ–Ω")
                return True
        except FileNotFoundError:
            pass
        
        print("‚ùå Ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok:")
        print("  macOS: brew install ngrok")
        print("  Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å https://ngrok.com/")
        print("  Linux: https://ngrok.com/download")
        return False
    
    def stop_existing_ngrok(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ngrok –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ngrok —á–µ—Ä–µ–∑ API
            requests.post('http://localhost:4040/api/tunnels', timeout=2)
        except:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
        try:
            subprocess.run(['pkill', '-f', 'ngrok'], capture_output=True)
            time.sleep(1)
        except:
            pass
    
    def start_ngrok(self):
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ 4040 –¥–ª—è ngrok...")
        free_port(4040)
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å"""
        print("üîó –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ ngrok
        try:
            response = requests.get('http://localhost:4040/api/tunnels', timeout=2)
            tunnels = response.json()['tunnels']
            for tunnel in tunnels:
                if tunnel['proto'] == 'https':
                    self.ngrok_url = tunnel['public_url']
                    print(f"‚úÖ Ngrok —É–∂–µ –∑–∞–ø—É—â–µ–Ω: {self.ngrok_url}")
                    return True
        except:
            pass  # Ngrok –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
        self.stop_existing_ngrok()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(['ngrok', 'http', '3000'], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            self.processes.append(("Ngrok", process))
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_attempts = 10
            for attempt in range(max_attempts):
                time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                try:
                    response = requests.get('http://localhost:4040/api/tunnels', timeout=5)
                    if response.status_code == 200:
                        tunnels = response.json()['tunnels']
                        for tunnel in tunnels:
                            if tunnel['proto'] == 'https':
                                self.ngrok_url = tunnel['public_url']
                                print(f"‚úÖ Ngrok —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: {self.ngrok_url}")
                                return True
                except requests.exceptions.RequestException:
                    if attempt < max_attempts - 1:
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                        continue
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                        return False
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL")
            return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
            return False
    
    def start_backend(self):
        print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ 8000 –¥–ª—è backend...")
        free_port(8000)
        """–ó–∞–ø—É—Å–∫ FastAPI –±—ç–∫–µ–Ω–¥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...")
        backend_dir = Path("backend")
        if not backend_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            cmd = [sys.executable, "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
            process = subprocess.Popen(cmd, cwd=backend_dir)
            self.processes.append(("Backend", process))
            print("‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞: {e}")
            return False
    
    def start_frontend(self):
        print("üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ 3000 –¥–ª—è frontend...")
        free_port(3000)
        """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üé® –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            cmd = [sys.executable, "no_cache_server.py"]
            process = subprocess.Popen(cmd, cwd=frontend_dir)
            self.processes.append(("Frontend", process))
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot_dir = Path("tg_bot")
        if not bot_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ tg_bot –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            constants_file = bot_dir / "constants.py"
            if not constants_file.exists():
                print("‚ùå –§–∞–π–ª tg_bot/constants.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å BOT_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω'")
                return False
            
            cmd = [sys.executable, "main.py"]
            process = subprocess.Popen(cmd, cwd=bot_dir)
            self.processes.append(("Bot", process))
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def update_cors(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±—ç–∫–µ–Ω–¥–µ"""
        if not self.ngrok_url:
            return False
            
        try:
            cors_file = Path("backend/src/main.py")
            if not cors_file.exists():
                return False
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(cors_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º ngrok URL –≤ CORS
            ngrok_domain = self.ngrok_url.replace('https://', '').replace('http://', '')
            
            if ngrok_domain not in content:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å allow_origins –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –¥–æ–º–µ–Ω
                import re
                pattern = r'allow_origins=\[\s*([^\]]*)\]'
                match = re.search(pattern, content)
                
                if match:
                    origins = match.group(1)
                    if ngrok_domain not in origins:
                        new_origins = origins.rstrip() + f'\n        "{ngrok_domain}",'
                        content = re.sub(pattern, f'allow_origins=[{new_origins}]', content)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                        with open(cors_file, 'w', encoding='utf-8') as f:
                            f.write(content)
                        
                        print(f"‚úÖ CORS –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: {ngrok_domain}")
                        return True
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å CORS: {e}")
            return False
    
    def show_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("=" * 70)
        print("üéØ Telegram Mini App —Å HTTPS - –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        print("=" * 70)
        
        if self.ngrok_url:
            print(f"üîó HTTPS URL: {self.ngrok_url}")
            print(f"üì± Mini App URL: {self.ngrok_url}/index.html")
        
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("  ‚îú‚îÄ‚îÄ backend/     - FastAPI –±—ç–∫–µ–Ω–¥ (–ø–æ—Ä—Ç 8000)")
        print("  ‚îú‚îÄ‚îÄ frontend/    - Mini App –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ—Ä—Ç 3000)")
        print("  ‚îî‚îÄ‚îÄ tg_bot/      - Telegram –±–æ—Ç")
        print()
        print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print("  - –ë—ç–∫–µ–Ω–¥ API: http://localhost:8000/api")
        print("  - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/api/docs")
        print("  - –§—Ä–æ–Ω—Ç–µ–Ω–¥ (–ª–æ–∫–∞–ª—å–Ω–æ): http://localhost:3000/index.html")
        
        if self.ngrok_url:
            print(f"  - –§—Ä–æ–Ω—Ç–µ–Ω–¥ (HTTPS): {self.ngrok_url}/index.html")
        
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ tg_bot/constants.py")
        print("  2. –°–æ–∑–¥–∞–π—Ç–µ Mini App –≤ @BotFather")
        if self.ngrok_url:
            print(f"  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: {self.ngrok_url}/index.html")
        print("  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram")
        print("=" * 70)
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name, process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è  {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all()
        sys.exit(0)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
        if not self.check_ngrok():
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services_started = 0
        
        if self.start_backend():
            services_started += 1
            time.sleep(2)
        
        if self.start_frontend():
            services_started += 1
            time.sleep(2)
        
        if self.start_ngrok():
            services_started += 1
            time.sleep(2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º CORS
            self.update_cors()
        
        if self.start_bot():
            services_started += 1
        
        if services_started == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.show_info()
        
        print(f"\n‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {services_started}/4")
        print("üéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                for name, process in self.processes:
                    if process.poll() is not None:
                        print(f"‚ö†Ô∏è  {name} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        self.running = False
                        break
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()

def main():
    launcher = MiniAppHTTPSLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 