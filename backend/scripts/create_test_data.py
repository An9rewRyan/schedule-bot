#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import asyncio
from datetime import date, time, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

from src.repository.db import engine
from src.models.db import TimeSlot, User
from sqlmodel import Session, select
from sqlmodel.ext.asyncio.session import AsyncSession
from sqlalchemy.ext.asyncio import async_sessionmaker

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def create_test_timeslots():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–π–º—Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"""
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤...")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    time_slots = [
        (time(9, 0), time(10, 0)),   # 9:00 - 10:00
        (time(10, 0), time(11, 0)),  # 10:00 - 11:00
        (time(11, 0), time(12, 0)),  # 11:00 - 12:00
        (time(14, 0), time(15, 0)),  # 14:00 - 15:00
        (time(15, 0), time(16, 0)),  # 15:00 - 16:00
        (time(16, 0), time(17, 0)),  # 16:00 - 17:00
        (time(17, 0), time(18, 0)),  # 17:00 - 18:00
        (time(18, 0), time(19, 0)),  # 18:00 - 19:00
        (time(19, 0), time(20, 0)),  # 19:00 - 20:00
    ]
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º—Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    today = date.today()
    created_count = 0
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–π–º—Å–ª–æ—Ç—ã
        result = await session.exec(select(TimeSlot))
        existing_slots = result.all()
        
        if existing_slots:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(existing_slots)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤")
            response = input("–°–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–π–º—Å–ª–æ—Ç—ã? (y/n): ")
            if response.lower() != 'y':
                print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        for day_offset in range(7):  # –°–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
            current_date = today + timedelta(days=day_offset)
            weekday_name = weekdays[current_date.weekday()]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞)
            if current_date.weekday() == 6:  # 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                continue
                
            for start_time, end_time in time_slots:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º—Å–ª–æ—Ç
                timeslot = TimeSlot(
                    date=current_date,
                    start_time=start_time,
                    end_time=end_time,
                    weekday=weekday_name
                )
                
                session.add(timeslot)
                created_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤")

async def create_test_users():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    test_users = [
        {
            "telegram_id": 123456789,
            "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
            "second_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "age": 25,
            "phone_number": "+79001234567",
            "is_admin": False
        },
        {
            "telegram_id": 987654321,
            "first_name": "–ê–¥–º–∏–Ω",
            "second_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
            "age": 30,
            "phone_number": "+79009876543",
            "is_admin": True
        }
    ]
    
    async with async_session() as session:
        created_count = 0
        
        for user_data in test_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await session.exec(
                select(User).where(User.telegram_id == user_data["telegram_id"])
            )
            existing_user = result.first()
            
            if not existing_user:
                user = User(**user_data)
                session.add(user)
                created_count += 1
            else:
                print(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        await session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def show_existing_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ"""
    print("üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ:")
    
    async with async_session() as session:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º—Å–ª–æ—Ç—ã
        result = await session.exec(select(TimeSlot))
        timeslots = result.all()
        print(f"üéØ –¢–∞–π–º—Å–ª–æ—Ç—ã: {len(timeslots)}")
        
        if timeslots:
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤:")
            for slot in timeslots[-5:]:
                print(f"  - {slot.date} {slot.start_time}-{slot.end_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.exec(select(User))
        users = result.all()
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}")
        
        if users:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in users:
                print(f"  - {user.first_name} {user.second_name} (ID: {user.telegram_id})")

async def main():
    print("=" * 60)
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram Mini App")
    print("=" * 60)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await show_existing_data()
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await create_test_timeslots()
        print()
        await create_test_users()
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        await show_existing_data()
        
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Mini App")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ backend/src/repository/db.py")

if __name__ == "__main__":
    asyncio.run(main()) 