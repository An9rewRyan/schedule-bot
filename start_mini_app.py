#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram Mini App –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import sys
import os
import time
import signal
import threading
from pathlib import Path

class MiniAppLauncher:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ FastAPI –±—ç–∫–µ–Ω–¥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...")
        backend_dir = Path("backend")
        if not backend_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not (backend_dir / "venv").exists():
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±—ç–∫–µ–Ω–¥–∞...")
                subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                             cwd=backend_dir, check=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥
            cmd = [sys.executable, "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
            process = subprocess.Popen(cmd, cwd=backend_dir)
            self.processes.append(("Backend", process))
            print("‚úÖ –ë—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞: {e}")
            return False
    
    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üé® –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            cmd = [sys.executable, "server.py"]
            process = subprocess.Popen(cmd, cwd=frontend_dir)
            self.processes.append(("Frontend", process))
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot_dir = Path("tg_bot")
        if not bot_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ tg_bot –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            constants_file = bot_dir / "constants.py"
            if not constants_file.exists():
                print("‚ùå –§–∞–π–ª tg_bot/constants.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å BOT_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω'")
                return False
            
            cmd = [sys.executable, "main.py"]
            process = subprocess.Popen(cmd, cwd=bot_dir)
            self.processes.append(("Bot", process))
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            "fastapi",
            "uvicorn",
            "aiogram",
            "httpx"
        ]
        
        missing_packages = []
        for package in required_packages:
            try:
                __import__(package)
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
            return False
        
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def show_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("=" * 60)
        print("üéØ Telegram Mini App - –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        print("=" * 60)
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("  ‚îú‚îÄ‚îÄ backend/     - FastAPI –±—ç–∫–µ–Ω–¥ (–ø–æ—Ä—Ç 8000)")
        print("  ‚îú‚îÄ‚îÄ frontend/    - Mini App –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ—Ä—Ç 3000)")
        print("  ‚îî‚îÄ‚îÄ tg_bot/      - Telegram –±–æ—Ç")
        print()
        print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print("  - –ë—ç–∫–µ–Ω–¥ API: http://localhost:8000/api")
        print("  - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/api/docs")
        print("  - Mini App: http://localhost:3000/index.html")
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ tg_bot/constants.py")
        print("  2. –°–æ–∑–¥–∞–π—Ç–µ Mini App –≤ @BotFather")
        print("  3. –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram")
        print("=" * 60)
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name, process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è  {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all()
        sys.exit(0)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.show_info()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        services_started = 0
        
        if self.start_backend():
            services_started += 1
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        if self.start_frontend():
            services_started += 1
            time.sleep(1)
        
        if self.start_bot():
            services_started += 1
        
        if services_started == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
            return
        
        print(f"\n‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {services_started}/3")
        print("üéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                for name, process in self.processes:
                    if process.poll() is not None:
                        print(f"‚ö†Ô∏è  {name} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        self.running = False
                        break
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()

def main():
    launcher = MiniAppLauncher()
    launcher.run()

if __name__ == "__main__":
    main() 