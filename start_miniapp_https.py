#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Mini App —Å HTTPS —á–µ—Ä–µ–∑ ngrok
- –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ backend
- –û–±–Ω–æ–≤–ª—è–µ—Ç URL –≤ frontend
- –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
"""

import subprocess
import time
import requests
import json
import re
import os
import signal
import sys
from pathlib import Path
import logging
from datetime import datetime

class MiniAppStarter:
    def __init__(self):
        self.ngrok_process = None
        self.backend_process = None
        self.frontend_process = None
        self.bot_process = None
        self.frontend_url = None
        self.backend_url = None
        self.logs_dir = Path("logs")
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_dir.mkdir(exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        for log_file in self.logs_dir.glob("*.log"):
            log_file.unlink()
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('MiniAppStarter')
        self.logger.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ª–æ–≥–∞
        main_handler = logging.FileHandler(self.logs_dir / "miniapp_starter.log")
        main_handler.setFormatter(formatter)
        self.logger.addHandler(main_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter('%(message)s'))
        self.logger.addHandler(console_handler)
        
        self.logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def cleanup(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.logger.info("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok
        if self.ngrok_process:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok...")
            self.ngrok_process.terminate()
            
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for process_name, process in [
            ("backend", self.backend_process),
            ("frontend", self.frontend_process),
            ("bot", self.bot_process)
        ]:
            if process:
                self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {process_name}...")
                process.terminate()
                
        # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
        subprocess.run(["pkill", "-f", "ngrok"], capture_output=True)
        
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
        for port in [8000, 3000, 4040]:
            result = subprocess.run(["lsof", "-ti", f":{port}"], capture_output=True, text=True)
            if result.stdout.strip():
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    subprocess.run(["kill", "-9", pid], capture_output=True)
                    
        self.logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.cleanup()
        sys.exit(0)
        
    def start_ngrok(self):
        """–ó–∞–ø—É—Å–∫ ngrok –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª–µ–π...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ngrok
        subprocess.run(["pkill", "-f", "ngrok"], capture_output=True)
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫ ngrok —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        ngrok_log_file = self.logs_dir / "ngrok.log"
        self.ngrok_process = subprocess.Popen(
            ["ngrok", "start", "--config", "ngrok.yml", "--all"],
            stdout=open(ngrok_log_file, 'w'),
            stderr=subprocess.STDOUT
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ ngrok
        self.logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ ngrok...")
        time.sleep(5)
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª–µ–π
        return self.get_ngrok_urls()
        
    def get_ngrok_urls(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç—É–Ω–Ω–µ–ª–µ–π –∏–∑ ngrok API"""
        try:
            response = requests.get("http://localhost:4040/api/tunnels")
            data = response.json()
            
            urls = {}
            for tunnel in data.get('tunnels', []):
                name = tunnel.get('name', '')
                public_url = tunnel.get('public_url', '')
                if public_url:
                    urls[name] = public_url
                    
            if 'frontend' in urls and 'backend' in urls:
                self.frontend_url = urls['frontend']
                self.backend_url = urls['backend']
                
                self.logger.info(f"‚úÖ Frontend URL: {self.frontend_url}")
                self.logger.info(f"‚úÖ Backend URL: {self.backend_url}")
                return True
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç—É–Ω–Ω–µ–ª–µ–π")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ngrok URLs: {e}")
            return False
            
    def update_cors_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ backend"""
        self.logger.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        backend_main_path = Path("backend/src/main.py")
        if not backend_main_path.exists():
            self.logger.error("‚ùå –§–∞–π–ª backend/src/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(backend_main_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é origins
        origins_pattern = r'origins = \[(.*?)\]'
        match = re.search(origins_pattern, content, re.DOTALL)
        
        if not match:
            self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è origins –≤ main.py")
            return False
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ origins
        new_origins = [
            '"http://localhost:3000"',
            '"http://127.0.0.1:3000"',
            f'"{self.frontend_url}"',
            f'"{self.backend_url}"'
        ]
        
        new_origins_str = f"origins = [\n    " + ",\n    ".join(new_origins) + "\n]"
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        new_content = re.sub(origins_pattern, new_origins_str, content, flags=re.DOTALL)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(backend_main_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
            
        self.logger.info("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    def update_frontend_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –≤ frontend"""
        self.logger.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ frontend –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        frontend_app_path = Path("frontend/app.js")
        if not frontend_app_path.exists():
            self.logger.error("‚ùå –§–∞–π–ª frontend/app.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(frontend_app_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getBaseURL
        pattern = r"return 'https://[^']+\.ngrok-free\.app/api';"
        replacement = f"return '{self.backend_url}/api';"
        
        new_content = re.sub(pattern, replacement, content)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(frontend_app_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
            
        self.logger.info("‚úÖ Frontend –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
        
    def update_telegram_bot_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –≤ Telegram –±–æ—Ç–µ"""
        self.logger.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        bot_start_path = Path("tg_bot/handlers/start.py")
        if not bot_start_path.exists():
            self.logger.error("‚ùå –§–∞–π–ª tg_bot/handlers/start.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(bot_start_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º MINI_APP_URL
        pattern = r'MINI_APP_URL = "https://[^"]+\.ngrok-free\.app"'
        replacement = f'MINI_APP_URL = "{self.frontend_url}"'
        
        new_content = re.sub(pattern, replacement, content)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(bot_start_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
            
        self.logger.info("‚úÖ Telegram bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
        
    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ backend –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        backend_log_file = self.logs_dir / "backend.log"
        self.backend_process = subprocess.Popen(
            ["python", "-m", "src.main"],
            cwd="backend",
            stdout=open(backend_log_file, 'w'),
            stderr=subprocess.STDOUT
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        try:
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                self.logger.info("‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                self.logger.info(f"üìÑ –õ–æ–≥–∏ backend: {backend_log_file}")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
            
        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä")
        return False
        
    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ frontend –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        frontend_log_file = self.logs_dir / "frontend.log"
        self.frontend_process = subprocess.Popen(
            ["python", "no_cache_server.py"],
            cwd="frontend",
            stdout=open(frontend_log_file, 'w'),
            stderr=subprocess.STDOUT
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ frontend
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        try:
            response = requests.get("http://localhost:3000", timeout=5)
            if response.status_code == 200:
                self.logger.info("‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                self.logger.info(f"üìÑ –õ–æ–≥–∏ frontend: {frontend_log_file}")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend: {e}")
            
        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend —Å–µ—Ä–≤–µ—Ä")
        return False
        
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ bot –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        bot_log_file = self.logs_dir / "telegram_bot.log"
        self.bot_process = subprocess.Popen(
            ["python", "main.py"],
            cwd="tg_bot",
            stdout=open(bot_log_file, 'w'),
            stderr=subprocess.STDOUT
        )
        
        time.sleep(2)
        self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.logger.info(f"üìÑ –õ–æ–≥–∏ telegram bot: {bot_log_file}")
        return True
        
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            self.logger.info("üéØ –ó–∞–ø—É—Å–∫ Mini App —Å HTTPS –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
            self.logger.info("=" * 50)
            
            # 1. –ó–∞–ø—É—Å–∫ ngrok
            if not self.start_ngrok():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok")
                return False
                
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            if not self.update_cors_settings():
                return False
                
            if not self.update_frontend_config():
                return False
                
            if not self.update_telegram_bot_config():
                return False

            # 2.5 –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤...")
            subprocess.run(["python", "backend/src/utilities/scripts/clear_timeslots.py"])
            self.logger.info("‚úÖ –¢–∞–π–º—Å–ª–æ—Ç—ã –æ—á–∏—â–µ–Ω—ã")
                
            # 3. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            if not self.start_backend():
                return False
                
            if not self.start_frontend():
                return False
                
            if not self.start_telegram_bot():
                return False
                
            self.logger.info("\n" + "=" * 50)
            self.logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            self.logger.info(f"üåê Frontend: {self.frontend_url}")
            self.logger.info(f"üîß Backend: {self.backend_url}")
            self.logger.info(f"üíª –õ–æ–∫–∞–ª—å–Ω—ã–π frontend: http://localhost:3000")
            self.logger.info(f"üîó –õ–æ–∫–∞–ª—å–Ω—ã–π backend: http://localhost:8000")
            self.logger.info("\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini App –≤ Telegram:")
            self.logger.info(f"   Mini App URL: {self.frontend_url}")
            self.logger.info(f"\nüìÅ –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.logs_dir}")
            self.logger.info("   - miniapp_starter.log - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥")
            self.logger.info("   - ngrok.log - –ª–æ–≥–∏ ngrok")
            self.logger.info("   - backend.log - –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞")
            self.logger.info("   - frontend.log - –ª–æ–≥–∏ frontend —Å–µ—Ä–≤–µ—Ä–∞")
            self.logger.info("   - telegram_bot.log - –ª–æ–≥–∏ Telegram –±–æ—Ç–∞")
            self.logger.info("\nüõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
            self.logger.info("=" * 50)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.signal_handler(signal.SIGINT, None)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.cleanup()
            return False

if __name__ == "__main__":
    starter = MiniAppStarter()
    starter.run() 